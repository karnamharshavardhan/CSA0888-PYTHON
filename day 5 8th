def min_swaps_to_chessboard(board):

    n = len(board)

    

    # Count the number of 1s and 0s in the first row and first column

    row_count = [0] * n

    col_count = [0] * n

    for i in range(n):

        for j in range(n):

            if board[i][j] != (i + j) % 2:

                return -1

            row_count[i] += board[i][j]

            col_count[j] += board[i][j]

    

    # Check if it's possible to form a valid chessboard

    for count in (row_count, col_count):

        if sorted(count) != [n // 2, (n + 1) // 2]:

            return -1

    

    # Calculate the number of swaps needed for rows and columns

    row_diff = sum([abs(row_count[i] - n // 2) for i in range(n)]) // 2

    col_diff = sum([abs(col_count[i] - n // 2) for i in range(n)]) // 2

    

    return (row_diff + col_diff) // 2



# Test cases

test_cases = [

    [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]],

    [[0,1],[1,0]],

    [[1,0],[1,0]],

    [[0, 1, 0], [1, 0, 1], [1, 1, 0]],

    [[0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1]]

]



for board in test_cases:

    result = min_swaps_to_chessboard(board)

    print(f"Input: board = {board}\nOutput: {result}\n")

                        
